###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       21/Oct/2019  21:01:58
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Github\EiE\firmware_common\application\hello_world.c
#    Command line =  
#        -f C:\Users\JoeyD\AppData\Local\Temp\EW47DA.tmp
#        (C:\Github\EiE\firmware_common\application\hello_world.c -D EIE_ASCII
#        --preprocess=cs C:\Github\EiE\firmware_ascii\iar_8_10_1\Debug\List -lC
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\Debug\List -o
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\ -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\bsp\ -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\drivers\ -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\application\ -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\..\firmware_common\ -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\..\firmware_common\application\
#        -I C:\Github\EiE\firmware_ascii\iar_8_10_1\..\..\firmware_common\bsp\
#        -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\..\firmware_common\cmsis\
#        -I
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\..\..\firmware_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\Debug\List\hello_world.lst
#    Object file  =  
#        C:\Github\EiE\firmware_ascii\iar_8_10_1\Debug\Obj\hello_world.o
#
###############################################################################

C:\Github\EiE\firmware_common\application\hello_world.c
      1          /*!*********************************************************************************************************************
      2          @file user_app1.c                                                                
      3          @brief User's tasks / applications are written here.  This description
      4          should be replaced by something specific to the task.
      5          
      6          ----------------------------------------------------------------------------------------------------------------------
      7          This is the first project completed in the EiE program
      8          This app is a simple "hello World" implementation
      9          The red LED simply blinks twice a second, aka 50% duty cycle
     10          ------------------------------------------------------------------------------------------------------------------------
     11          GLOBALS
     12          - NONE
     13          
     14          CONSTANTS
     15          - NONE
     16          
     17          TYPES
     18          - NONE
     19          
     20          PUBLIC FUNCTIONS
     21          - NONE
     22          
     23          PROTECTED FUNCTIONS
     24          - void HelloWorldInitialize(void)
     25          - void HelloWorldRunActiveState(void)
     26          
     27          
     28          **********************************************************************************************************************/
     29          
     30          #include "configuration.h"
     31          
     32          /***********************************************************************************************************************
     33          Global variable definitions with scope across entire project.
     34          All Global variable names shall start with "G_<type>HelloWorld"
     35          ***********************************************************************************************************************/
     36          /* New variables */

   \                                 In section .bss, align 4
     37          volatile u32 G_u32HelloWorldFlags;                          /*!< @brief Global state flags */
   \                     G_u32HelloWorldFlags:
   \   00000000                      DS8 4
     38          
     39          
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     42          extern volatile u32 G_u32SystemTime1ms;                   /*!< @brief From main.c */
     43          extern volatile u32 G_u32SystemTime1s;                    /*!< @brief From main.c */
     44          extern volatile u32 G_u32SystemFlags;                     /*!< @brief From main.c */
     45          extern volatile u32 G_u32ApplicationFlags;                /*!< @brief From main.c */
     46          
     47          
     48          /***********************************************************************************************************************
     49          Global variable definitions with scope limited to this local application.
     50          Variable names shall start with "HelloWorld_<type>" and be declared as static.
     51          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     52          static fnCode_type HelloWorld_pfStateMachine;               /*!< @brief The state machine function pointer */
   \                     HelloWorld_pfStateMachine:
   \   00000000                      DS8 4
     53          //static u32 HelloWorld_u32Timeout;                           /*!< @brief Timeout counter used across states */
     54          
     55          
     56          /**********************************************************************************************************************
     57          Function Definitions
     58          **********************************************************************************************************************/
     59          
     60          /*--------------------------------------------------------------------------------------------------------------------*/
     61          /*! @publicsection */                                                                                            
     62          /*--------------------------------------------------------------------------------------------------------------------*/
     63          
     64          /*--------------------------------------------------------------------------------------------------------------------*/
     65          /*! @protectedsection */                                                                                            
     66          /*--------------------------------------------------------------------------------------------------------------------*/
     67          
     68          /*!--------------------------------------------------------------------------------------------------------------------
     69          @fn void HelloWorldInitialize(void)
     70          
     71          @brief
     72          Initializes the State Machine and its variables.
     73          
     74          Should only be called once in main init section.
     75          
     76          Requires:
     77          - NONE
     78          
     79          Promises:
     80          - NONE
     81          
     82          */

   \                                 In section .text, align 2, keep-with-next
     83          void HelloWorldInitialize(void)
     84          {
     85            HEARTBEAT_OFF();
   \                     HelloWorldInitialize: (+1)
   \   00000000   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000004   0x....             LDR.N    R1,??DataTable2  ;; 0x400e0c30
   \   00000006   0x6008             STR      R0,[R1, #+0]
     86            /* If good initialization, set state to Idle */
     87            if( 1 )
     88            {
     89              HelloWorld_pfStateMachine = HelloWorldSM_Idle;
   \   00000008   0x.... 0x....      ADR.W    R0,HelloWorldSM_Idle
   \   0000000C   0x....             LDR.N    R1,??DataTable2_1
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     90            }
     91            else
     92            {
     93              /* The task isn't properly initialized, so shut it down and don't run */
     94              HelloWorld_pfStateMachine = HelloWorldSM_Error;
     95            }
     96          
     97          } /* end HelloWorldInitialize() */
   \   00000010   0x4770             BX       LR               ;; return
     98          
     99            
    100          /*!----------------------------------------------------------------------------------------------------------------------
    101          @fn void HelloWorldRunActiveState(void)
    102          
    103          @brief Selects and runs one iteration of the current state in the state machine.
    104          
    105          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    106          may take 1ms / n to execute.
    107          
    108          Requires:
    109          - State machine function pointer points at current state
    110          
    111          Promises:
    112          - Calls the function to pointed by the state machine function pointer
    113          
    114          */

   \                                 In section .text, align 2, keep-with-next
    115          void HelloWorldRunActiveState(void)
    116          {
   \                     HelloWorldRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    117            HelloWorld_pfStateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    118          
    119          } /* end HelloWorldRunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    120          
    121          
    122          /*------------------------------------------------------------------------------------------------------------------*/
    123          /*! @privatesection */                                                                                            
    124          /*--------------------------------------------------------------------------------------------------------------------*/
    125          
    126          
    127          /**********************************************************************************************************************
    128          State Machine Function Definitions
    129          **********************************************************************************************************************/
    130          /*-------------------------------------------------------------------------------------------------------------------*/
    131          /* What does this state do? */

   \                                 In section .text, align 4, keep-with-next
    132          static void HelloWorldSM_Idle(void)
    133          {
    134                static u32 u32counter = 0;
    135            static bool bLightIsOn = FALSE;
    136            
    137            // Increment u32Counter every 1ms cycle
    138            u32counter++;
   \                     HelloWorldSM_Idle: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable2_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable2_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
    139            
    140            //check and roll over
    141            if(u32counter == COUNTER_LIMIT_MS)
   \   0000000A   0x....             LDR.N    R0,??DataTable2_2
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF5B0 0x7FFA      CMP      R0,#+500
   \   00000012   0xD11A             BNE.N    ??HelloWorldSM_Idle_0
    142            {
    143              
    144              u32counter = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable2_2
   \   00000018   0x6008             STR      R0,[R1, #+0]
    145            /*Since bLight changes every 500 ms then HEARTBEAT state changes every 500ms accordingly*/
    146              if(bLightIsOn)
   \   0000001A   0x....             LDR.N    R0,??DataTable2_3
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD004             BEQ.N    ??HelloWorldSM_Idle_1
    147              {
    148                HEARTBEAT_OFF();
   \   00000022   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000026   0x....             LDR.N    R1,??DataTable2  ;; 0x400e0c30
   \   00000028   0x6008             STR      R0,[R1, #+0]
   \   0000002A   0xE003             B.N      ??HelloWorldSM_Idle_2
    149              }
    150              else
    151              {
    152                HEARTBEAT_ON();
   \                     ??HelloWorldSM_Idle_1: (+1)
   \   0000002C   0xF05F 0x4000      MOVS     R0,#-2147483648
   \   00000030   0x....             LDR.N    R1,??DataTable2_4  ;; 0x400e0c34
   \   00000032   0x6008             STR      R0,[R1, #+0]
    153              }
    154              
    155            /*when counter hits 500 ms, bool bLightIsOn switches.*/
    156            bLightIsOn = !bLightIsOn;
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??HelloWorldSM_Idle_2: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable2_3
   \   00000036   0x7800             LDRB     R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD103             BNE.N    ??HelloWorldSM_Idle_3
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x....             LDR.N    R1,??DataTable2_3
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   \   00000042   0xE002             B.N      ??HelloWorldSM_Idle_0
   \                     ??HelloWorldSM_Idle_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR.N    R1,??DataTable2_3
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    157            }
    158          } /* end HelloWorldSM_Idle() */
   \                     ??HelloWorldSM_Idle_0: (+1)
   \   0000004A   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     `HelloWorldSM_Idle::u32counter`:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     `HelloWorldSM_Idle::bLightIsOn`:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400E0C30         DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     HelloWorld_pfStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     `HelloWorldSM_Idle::u32counter`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     `HelloWorldSM_Idle::bLightIsOn`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400E0C34         DC32     0x400e0c34
    159               
    160          
    161          /*-------------------------------------------------------------------------------------------------------------------*/
    162          /* Handle an error */
    163          static void HelloWorldSM_Error(void)          
    164          {
    165          
    166          } /* end HelloWorldSM_Error() */
    167          
    168          
    169          
    170          
    171          /*--------------------------------------------------------------------------------------------------------------------*/
    172          /* End of File                                                                                                        */
    173          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HelloWorldInitialize
       8   HelloWorldRunActiveState
         8   -- Indirect call
       0   HelloWorldSM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  G_u32HelloWorldFlags
      18  HelloWorldInitialize
      10  HelloWorldRunActiveState
      76  HelloWorldSM_Idle
       4  HelloWorld_pfStateMachine
       1  bLightIsOn
       4  u32counter

 
  13 bytes in section .bss
 124 bytes in section .text
 
 124 bytes of CODE memory
  13 bytes of DATA memory

Errors: none
Warnings: 1
